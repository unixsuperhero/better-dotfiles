#!/usr/bin/env ruby

require 'optparse'
require 'awesome_print'
require 'ostruct'
require 'fileutils'

module MainCommand
  extend self

  attr_accessor :args, :stdinput, :stdoutput
  attr_accessor :piped_data
  attr_accessor :special_options
  def run(args=ARGV.clone, input=$stdin, output=$stdout)
    @args, @stdinput, @stdoutput = args, input, output

    parse_options

    subcommand = args.shift

    case subcommand
    when 'generate'
      generate_binstubs
    when 'db','db:migrate','migrate','migrations','dbm'
      run_migrations
    when 'console', 'c', 'con', 'sc'
      run_rails_console
    when 'rake'
      run_rake_command
    when 'logs','log','l'
      tail_logs
    when 'restart', 'ps:restart'
      restart_app
    when 'config:get', 'getconfig', 'configs'
      list_config_vars
    when 'config:set', 'setconfig', 'addconfig'
      save_config_vars
    when 'run'
      run_command
    when 'rebase'
      rebase_local_branch
    when 'push'
      push_local_branch
    end

    exit 0

    file = nil
    if not input.tty?
      @piped_data = input.read.chomp
      file = `echo '#{@piped_data}' | fzf -i -m`
    elsif special_options.map(&:first).any?{|sof| %w{ with: from: using: }.include?(sof) }
      sopts = special_options.find{|sop| %w{ with: from: using: }.include?(sop.first) }
      special_options.reject!{|sop| %w{ with: from: using: }.include?(sop.first) }
      file = `#{sopts[1..-1].join(' ')} | fzf -i -m`
      exit 1 unless $?.success?
    else
      file = `(git ls-files 2>/dev/null || find . -type f) | fzf -i -m`
      exit 1 unless $?.success?
    end

    exit 1 if file == nil

    files = file.split(/\n/).compact.reject{|fn| fn.strip.length == 0 }

    if special_options.empty?
      puts files
      exit 0
    end

    special_options.each do |opt|
      subcmd = opt.shift
      other_opts = opt.join(" ")
      safe_files = ?' + files.join("' '") + ?'
      case subcmd
      when 'run:'
        if other_opts[/%s/]
          cmd = other_opts.gsub(/%s/, safe_files)
          puts all_cmd: cmd
          system(cmd)
        else
          cmd = "#{other_opts} #{safe_files}"
          puts all_at_end_of_cmd: cmd
          system(cmd)
        end
      when 'runeach:'
        if other_opts[/%s/]
          files.each do |f|
            cmd = other_opts.gsub(/%s/, ?' + f + ?')
            puts each_cmd: cmd
            system(cmd)
          end
        else
          files.each do |f|
            cmd = "#{other_opts} '#{f}'"
            puts each_at_end_of_cmd: cmd
            system(cmd)
          end
        end
      end
    end

    puts
  end

  def generate_binstubs
    filenames = apps + remotes
    path = 'binstubs'
    FileUtils.mkdir_p('binstubs')
    filenames.each do |fn|
      src = __FILE__
      dest = File.join(path, fn)
      FileUtils.copy_file(src, dest)
    end
  end

  def run_migrations

  end

  def remotes
    git_remotes.lines.map do |gr|
      gr[/\w+/]
    end.sort.uniq
  end

  def apps
    git_remotes.lines.map{|gr|
      next unless path = gr[/heroku(app)?[.]com\S+/i]
      basename = File.basename(path).sub(/[.]git$/, '')
    }.compact.sort.uniq
  end

  def git_remotes
    @git_remotes ||= `git remote -v`
  end

  def parse_options
    @special_options ||= []
    i = 0
    last_arg = :not_started
    same_arg = 0
    while i < args.length
      sopts = []
      next i += 1 unless (arg=args[i]).strip[/:$/]
      if last_arg == arg
        same_arg += 1
      else
        same_arg = 0
        last_arg = arg
      end

      break if same_arg > 3

      sopts << arg
      sopts += args[(i+1)..-1].take_while do |sarg|
        not sarg.strip[/:$/]
      end
      @special_options.push sopts
      args.slice!(i, sopts.length)
    end
  end

  def options
    @options ||= OpenStruct.new.tap do |opts|
      # default options go here
      # or pass them to #new as a hash

      opts.show_help = false
    end
  end
end

puts MainCommand.run

