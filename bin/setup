#!/usr/bin/env ruby

=begin

Explanation:

In the description below, I use some placeholder/variables.
They are:

  section:
    descr: the name of a group of related dotfiles
    example usage: src/<section>/
    examples:
      - bash
      - zsh
      - tmux
      - git

The repo directory structure:

bin/         # => where setup and other scripts are
doc/         # => misc. markdown files
src/         # => this will be symlinked to ~/.config
versions/    # => different subsets of src/ used on different machines
current/     # => like src/, but folders contain links to the
             #    files to include for the _CURRENT_ system/env
             #    only; might be a symlink to src/current

The src/ directory structure:

  src/<section>/
    home/
      dot/
    patches/

Example using vim:

src/
  vim/
    ...see: custom_files...
      home/
        ...see: normal_home_files...
        dot/
          ...see: home_dot_files...

src/
src/<section>/*             :custom_files
src/<section>/home/*        :normal_home_files
src/<section>/home/dot/*    :home_dot_files
src/<section>/patches/*     :patch_files

custom_files:      my custom vim files
normal_home_files: files in $HOME without adding a dot
home_dot_files:    files in $HOME that need to start with a dot
patch_files:       files that could be in another section's custom_files directory

The src/current directory structure:

versions/mbp/
versions/mbp/<section>/*
versions/mbp/<section>/home/*
versions/mbp/<section>/home/dot/*
versions/mbp/<section>/patches/*


TO DO:
======

I haven't decided on a few things yet:

* should the custom include files be:
** compiled into 1 file, or included separately
*** compiling downsides:
*** - would constantly have to rebuild a section

The dot command to manage this directory:

* sections
** new section
** build section (aka)
** compile section

* versions
** [re]build <version>   (from versions/name/config.dot)
** manage config
*** dot v <name> use|add <section|custom>
**** dot v <name> use|add vim      # for a whole section
**** dot v <name> use|add vim/git  # for a custom incl. file

*** dot v <name> del|rm  <section|custom>
**** dot v <name> del|rm  vim      # for a whole section
**** dot v <name> del|rm  vim/git  # for a custom incl. file

* editing
** dot e vim/git
* organizing (files in sections or versions)
** dot m|mv vim/git root|home|dot

* misc
** new dot
** new home
** new custom

=end

require 'singleton'
require 'fileutils'
require 'optparse'
require 'awesome_print'

class Files
  include Singleton
  attr_accessor :file_opts

  def self.home
    instance.home
  end

  def self.pwd
    instance.pwd
  end

  def self.chdir(dest)
    instance.chdir(dest)
  end

  def self.glob(pattern)
    instance.glob(pattern)
  end

  def self.basename(f)
    instance.basename(f)
  end

  def self.directory?(f)
    instance.directory?(f)
  end

  def self.exist?(f)
    instance.exist?(f)
  end

  def self.join(*args)
    instance.join(*args)
  end

  def self.realpath(f, relative_to=nil)
    instance.realpath(f, relative_to=nil)
  end

  def self.symlink?(f)
    instance.symlink?(f)
  end

  def self.ln(src, dest, opts=instance.file_opts)
    instance.ln(src, dest, opts)
  end

  def self.ln_s(src, dest, opts=instance.file_opts)
    instance.ln_s(src, dest, opts)
  end

  def self.ln_sf(src, dest, opts=instance.file_opts)
    instance.ln_sf(src, dest, opts)
  end

  def self.link(src, dest, opts=instance.file_opts)
    instance.link(src, dest, opts)
  end

  def self.mkdir_p(list, opts=instance.file_opts)
    instance.mkdir_p(list, opts)
  end

  def self.mv(src, dest, opts=instance.file_opts)
    instance.mv(src, dest, opts)
  end

  def self.rm(list, opts=instance.file_opts)
    instance.rm(list, opts)
  end

  def self.file_opts
    instance.file_opts ||= {}
  end

  def self.set_opts(opts)
    instance.file_opts = opts
  end

  def home
    ENV['HOME']
  end

  def pwd
    Dir.pwd
  end

  def chdir(dest)
    Dir.chdir(dest)
  end

  def glob(pattern)
    Dir.glob(pattern)
  end

  def basename(f)
    File.basename(f)
  end

  def directory?(f)
    File.directory?(f)
  end

  def exist?(f)
    File.exist?(f)
  end

  def join(*args)
    File.join(*args)
  end

  def realpath(f, relative_to=nil)
    relative_to == nil ? File.realpath(f) : File.realpath(f, relative_to)
  end

  def symlink?(f)
    File.symlink?(f)
  end

  def ln(src, dest, opts=@file_opts)
    FileUtils.ln(src, dest, opts)
  end

  def ln_s(src, dest, opts=@file_opts)
    FileUtils.ln_s(src, dest, opts)
  end

  def ln_sf(src, dest, opts=@file_opts)
    FileUtils.ln_sf(src, dest, opts)
  end

  def link(src, dest, opts=@file_opts)
    if directory? src
      ln_s(src, dest, opts)
    else
      ln(src, dest, opts)
    end
  end

  def mkdir_p(list, opts=@file_opts)
    FileUtils.mkdir_p(list, opts)
  end

  def mv(src, dest, opts=@file_opts)
    FileUtils.mv(src, dest, opts)
  end

  def rm(list, opts=@file_opts)
    FileUtils.rm(list, opts)
  end
end

class Dotfiles
  attr_accessor :args, :now, :debug

  def self.build(args=ARGV.clone)
    Dotfiles.new(args).tap(&:build)
  end

  def self.install(args=ARGV.clone)
    Dotfiles.new(args).tap(&:install)
  end

  def self.setup(args=ARGV.clone)
    Dotfiles.new(args).tap(&:setup)
  end

  def initialize(args=ARGV.clone)
    @args = args
    @debug = false
    @now = Time.now.to_i
  end

  def src
    @src = pwd
    @src = Files.join(@src, 'src') if Files.exist?(Files.join(@src, 'src'))
  end

  def base
    @base ||= format '%s/dotfiles', Files.home
  end

  def base_backup
    format('%s/dotfiles.%s', Files.home, now)
  end

  def dots_backup
    format('%s/dots.%s', Files.home, now)
  end

  def shells
    %w{ bash zsh fish }
  end

  def shell
    parse_options
    @shell = args.first if shells.include? args.first
    @shell ||= Files.basename ENV['SHELL']
  end

  def ignored_shells
    shells.select{|sh| sh != shell }
  end

  def ignored_dirs
    ignored_shells + ['builds']
  end

  def file_opts
    parse_options
    @file_opts
  end

  def build_dir(latest=false)
    @build_dir ||= format('%s/tmp/builds/latest/', pwd) if latest == true && Files.exist?(format('%s/tmp/builds/latest/', pwd))
    @build_dir ||= format('%s/tmp/builds/%s/', pwd, Time.now.to_i).tap do |bdir|
      Files.mkdir_p bdir
      Files.ln_sf(bdir, format('%s/tmp/builds/latest', pwd))
    end
  end

  def build
    dirs = Dir[format '%s/*/', src].reject{|dir| ignored_dirs.include? Files.basename(dir) }
    dirs.each do |dir|
      dotdir = Files.join(dir, 'dot')

      no_dot = format '%s/no_dot', dotdir

      no_dots = Files.exist?(no_dot)
      no_dots &&= IO.read(no_dot).split(/\s*\n+\s*/)
      no_dots ||= []

      Dir[format '%s/*', dotdir].select{|df| Files.basename(df) != 'no_dot' }.each do |dot|
        dest = Files.basename dot
        dest = ?. + dest unless no_dots.include? dest
        dest = format '%s/%s', build_dir, dest

        Files.link dot, dest
      end
    end
  end

  def owd
    @owd ||= Files.pwd
  end

  def pwd
    owd
    @pwd ||= Files.pwd
  end

  def backup_dir(latest=false)
    @backup_dir ||= format('%s/tmp/builds/backups/latest/', pwd) if latest == true && Files.exist?(format('%s/tmp/builds/backups/latest/', pwd))
    @backup_dir ||= format('%s/tmp/builds/backups/%s/', pwd, Time.now.to_i).tap do |bdir|
      Files.mkdir_p bdir
      Files.ln_sf(pwd, format('%s/tmp/builds/backups/latest', pwd))
    end
  end

  def real_base_dir
    Files.realpath(base)
  end

  def real_src
    Files.realpath(src)
  end

  def ensure_base_dir_is_src
    if real_base_dir != real_src
      dest = Files.join(backup_dir(true), format("dotfiles.%s", now))
      Files.mv base, dest #, Files.file_opts.merge(noop: true)
      Files.ln_s src, base #, Files.file_opts.merge(noop: true)
    end
  end

  def install
    ensure_base_dir_is_src
    Dir['%s/{.,}*' % build_dir(true)].select{|f| !%w{. .. backups}.include? Files.basename(f) }.each do |f|
      puts %{RUNNING: 'rsync -avzn --exclude "#{backup_dir(true)}" --delete --backup --backup-dir="#{backup_dir(true)}" #{f} #{Files.home}/'}
      output = `rsync -avzn --exclude "#{backup_dir(true)}" --delete --backup --backup-dir="#{backup_dir(true)}" #{f} #{Files.home}/`
      puts output
    end
  end

  def setup
    build
    install

    return true

    ## EVERYTHING BELOW HERE IS FOR REFERENCE

    if pwd != base
      Files.rm(base) if Files.symlink? base
      Files.mv(base, base_backup) if Files.exist? base
      Files.mkdir_p(dots_backup)
      Files.ln_s pwd, base
    end

    Files.chdir base if debug == false

    # loop thru each `*/dot/` that is not in shells
    #
    # check for the existence of setup.yml
    #
    # load the files either renaming them all, or using the
    # custom naming defined in setup.yml
    ap ignored_shells: ignored_shells
    dirs = Dir['*/'].reject{|dir| ignored_shells.include? Files.basename(dir) }
    ap dirs: dirs
    dirs.each do |dir|
      dotdir = Files.join(dir, 'dot')

      no_dot = format '%s/no_dot', dotdir

      no_dots = Files.exist?(no_dot)
      no_dots &&= IO.read(no_dot).split(/\s*\n+\s*/)
      no_dots ||= []

      Dir[format '%s/*', dotdir].select{|df| Files.basename(df) != 'no_dot' }.each do |dot|
        dest = Files.basename dot
        dest = ?. + dest unless no_dots.include? dest
        dest = format '%s/%s', home, dest

        Files.mv [dest], dots_backup if Files.exist? dest

        Files.link dot, dest
      end
    end
  end

  def parse_options
    return args if @options_parsed == true
    @options_parsed = true
    args.options do |opts|
      opts.on('-d', '--debug', 'see: dry-run') do
        @debug = true
        Files.file_opts.merge! noop: true
      end

      opts.on('-n', '--dry-run', 'do not perform any file operations') do
        @debug = true
        Files.file_opts.merge! noop: true
      end

      opts.on('-v', '--verbose') do
        Files.file_opts.merge! verbose: true
      end

      opts.on('-s', '--shell SHELL') do |sh|
        @shell = sh
      end

      opts.on('-b', '--bash') do
        @shell = 'bash'
      end

      opts.on('-z', '--zsh') do
        @shell = 'zsh'
      end

      opts.on('-f', '--fish') do
        @shell = 'fish'
      end
    end.parse!
  end
end

#Dotfiles.build ARGV
#Dotfiles.install ARGV
Dotfiles.setup ARGV

## OLD NOTES

# <<-"OLD_v1"
# plain_srcs = %w{ vim }
# dot_srcs = %w{ vim/dot }
#
# case shell
# when /fish/i
#   plain_srcs << 'fish'
#   dot_srcs << 'fish/dot'
# when /bash/i
#   plain_srcs << 'bash'
#   dot_srcs << 'bash/dot'
# when /zsh/i
#   plain_srcs << 'zsh'
#   dot_srcs << 'zsh/dot'
# end
# OLD_v1
#
# puts <<"THE_PLAN"
#
#   So I think there should be 3 sections for each subsection:
#
#   1. files that automatically loaded by the app, boilerplate
#   if you will, (.vimrc/.vim, .bashrc, .zshrc, etc.)
#
#   1. then, maybe just a folder that goes in `~/.config/`
#
#   The boilerplate stuff can even got in a `dot/` folder
#   inside the `~/.config/` folder, but is then symlinked out.
#
#   So maybe it would look like this:
#
#   vim/
#   vim/dot/
#   vim/dot/vim/
#   vim/dot/vimrc
#   vim/hashrocket
#   vim/local
#   vim/bundles/
#
#   bash/
#   bash/dot/
#   bash/dot/bashrc
#   bash/dot/bash_profile
#   bash/local
#   bash/paths
#   bash/git
#   bash/ruby
#
#   if `dot/` has a `no_dot` file, anything listed in there
#   will be linked w/out being renamed
#
#   brew/dot/
#   brew/dot/no_dot
#   brew/dot/Brewfile
#
# THE_PLAN

